import { useProductStore } from '@data/products'
import Button from '@ui/Button'
import React, { useState } from 'react'
import { NavLink } from 'react-router-dom'
import styles from './index.module.scss'

type SelectedProductsProps = {
    products?: Products.Selected
    button?: React.ReactElement | null
    remove: (product: Products.ItemSelected) => void
    setQuantity: (product: Products.ItemSelected, quantity: number) => void
    // | ((
    //       set: React.Dispatch<React.SetStateAction<Products.Selected>>
    //   ) => (product: Products.ItemSelected, quantity: number) => void)
    setNeedToRecalculate: (status: boolean) => void
    selectedProducts: Products.Selected
    editMode: boolean
}

type ListItemProps = {
    product: Products.ItemSelected
    remove: (product: Products.ItemSelected) => void
    setQuantity: (product: Products.ItemSelected, quantity: number) => void
    setNeedToRecalculate: (status: boolean) => void
    editMode: boolean
    isLoading?: boolean
}

const ListItem = ({
    product,
    remove,
    setQuantity,
    setNeedToRecalculate,
    editMode,
    isLoading = false,
}: ListItemProps) => {
    const [message, setMessage] = useState('')
    console.log('render')
    // console.log('products s s', products)
    console.log('products s s', product)
    return (
        <li key={product.id}>
            <div className={styles.itemName}>
                {`${product.name} (${product.state})`}

                <span className={styles.info}>
                    <NavLink to={`product/${product.id}`} state={product}>
                        Info
                    </NavLink>
                </span>
            </div>
            {!isLoading ? (
                <span>loading</span>
            ) : (
                <input
                    className={styles.inputStyle}
                    disabled={editMode === false}
                    type="number"
                    min="0"
                    value={product.quantity?.toString()}
                    onChange={(e) => {
                        if (e.target.value.length > 6) return
                        setQuantity(product, +e.target.value)
                        setNeedToRecalculate(true)
                    }}
                    onBlur={(e) => {
                        if (+e.target.value === 0)
                            setMessage(' Set quantity please')
                    }}
                />
            )}

            <button onClick={() => remove(product)} className={styles.clearBtn}>
                delete
            </button>

            <span>{message}</span>
        </li>
    )
}

const SelectedProducts = ({
    products,
    button,
    remove,
    setQuantity,
    setNeedToRecalculate,
    selectedProducts,
    editMode = true,
}: SelectedProductsProps) => {
    console.log('dataaaaaaa', products)
    return (
        <div className={styles.container}>
            <ul>
                {products &&
                    Object.values(products).map((product) => (
                        <ListItem
                            editMode={editMode}
                            product={product}
                            key={product.id}
                            remove={remove}
                            setQuantity={setQuantity}
                            setNeedToRecalculate={setNeedToRecalculate}
                            // products={selectedProducts}
                        />
                    ))}
            </ul>
            {button}
        </div>
    )
}

export default SelectedProducts
